import tkinter as tk
from tkinter import messagebox
import heapq
import networkx as nx
import matplotlib.pyplot as plt

class EmergencyRouteApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Emergency Route Optimizer")
        self.graph = {}
        self.shortest_path = []
        self.blocked_edges = set()
        self.edge_checkboxes = {}
        self.root.geometry("575x500")

        # Road Inputs
        self.edges_frame = tk.Frame(root)
        self.edges_frame.pack(pady=10)

        tk.Label(self.edges_frame, text="From:").grid(row=0, column=0, padx=(5, 2), sticky="w")
        self.from_entry = tk.Entry(self.edges_frame, width=15)
        self.from_entry.grid(row=0, column=1, padx=(0, 15))

        tk.Label(self.edges_frame, text="To:").grid(row=0, column=2, padx=(5, 2), sticky="w")
        self.to_entry = tk.Entry(self.edges_frame, width=15)
        self.to_entry.grid(row=0, column=3, padx=(0, 15))

        tk.Label(self.edges_frame, text="Distance (km):").grid(row=1, column=0, padx=(5, 2), sticky="w")
        self.distance_entry = tk.Entry(self.edges_frame, width=15)
        self.distance_entry.grid(row=1, column=1, padx=(0, 15))

        tk.Label(self.edges_frame, text="Time (min):").grid(row=1, column=2, padx=(5, 2), sticky="w")
        self.time_entry = tk.Entry(self.edges_frame, width=15)
        self.time_entry.grid(row=1, column=3, padx=(0, 15))

        tk.Label(self.edges_frame, text="Risk (1–5):").grid(row=1, column=4, padx=(5, 2), sticky="w")
        self.risk_entry = tk.Entry(self.edges_frame, width=10)
        self.risk_entry.grid(row=1, column=5)

        self.add_button = tk.Button(self.edges_frame, text="Add Road", command=self.add_edge)
        self.add_button.grid(row=2, column=0, columnspan=6, pady=(10, 5))

        # Road List 
        self.list_frame = tk.Frame(root)
        self.list_frame.pack(pady=10)

        tk.Label(self.list_frame, text="Roads (check to block):").pack(anchor="w")


        pad_frame = tk.Frame(self.list_frame, bd=1, relief="sunken", bg="white")
        pad_frame.pack()

        self.checkbox_canvas = tk.Canvas(pad_frame, width=490, height=150, bg="white", highlightthickness=0)
        self.scrollbar = tk.Scrollbar(pad_frame, orient="vertical", command=self.checkbox_canvas.yview)
        self.scroll_frame = tk.Frame(self.checkbox_canvas, bg="white")

        self.scroll_frame.bind("<Configure>", lambda e: self.checkbox_canvas.configure(scrollregion=self.checkbox_canvas.bbox("all")))
        self.checkbox_canvas.create_window((0, 0), window=self.scroll_frame, anchor="nw")
        self.checkbox_canvas.configure(yscrollcommand=self.scrollbar.set)

        self.checkbox_canvas.pack(side="left", fill="both", expand=True)
        self.scrollbar.pack(side="right", fill="y")

        # Route Inputs
        self.route_frame = tk.Frame(root)
        self.route_frame.pack(pady=10)

        tk.Label(self.route_frame, text="Start:").grid(row=0, column=0)
        self.source_entry = tk.Entry(self.route_frame, width=15)
        self.source_entry.grid(row=0, column=1)

        tk.Label(self.route_frame, text="Destination:").grid(row=0, column=2)
        self.dest_entry = tk.Entry(self.route_frame, width=15)
        self.dest_entry.grid(row=0, column=3)

        self.find_button = tk.Button(root, text="Find Optimal Route", command=self.find_route)
        self.find_button.pack(pady=5)

        self.graph_button = tk.Button(root, text="Show Graph", command=self.show_graph)
        self.graph_button.pack(pady=5)

        self.result_label = tk.Label(root, text="", fg="blue")
        self.result_label.pack(pady=10)

    def add_edge(self):
        u = self.from_entry.get().strip()
        v = self.to_entry.get().strip()

        try:
            distance = float(self.distance_entry.get().strip())
            time = float(self.time_entry.get().strip())
            risk = float(self.risk_entry.get().strip())
        except ValueError:
            messagebox.showerror("Input Error", "Please enter valid numbers.")
            return

        if not u or not v:
            messagebox.showerror("Input Error", "Please enter both locations.")
            return

        cost = 1.0 * distance + 0.5 * time + 5.0 * risk

        self.graph.setdefault(u, []).append((v, cost))
        self.graph.setdefault(v, []).append((u, cost))

        label_text = f"{u} ↔ {v} | D:{distance}, T:{time}, R:{risk} | Cost: {cost:.2f}"
        var = tk.BooleanVar()
        cb = tk.Checkbutton(self.scroll_frame, text=label_text, variable=var,
                            command=lambda: self.toggle_block(u, v, var.get()),
                            bg="white", anchor="w")
        cb.pack(anchor="w")

        self.edge_checkboxes[(u, v)] = var
        self.edge_checkboxes[(v, u)] = var  # undirected

        for e in [self.from_entry, self.to_entry, self.distance_entry, self.time_entry, self.risk_entry]:
            e.delete(0, tk.END)

    def toggle_block(self, u, v, blocked):
        if blocked:
            self.blocked_edges.add((u, v))
            self.blocked_edges.add((v, u))
        else:
            self.blocked_edges.discard((u, v))
            self.blocked_edges.discard((v, u))

    def find_route(self):
        start = self.source_entry.get().strip()
        end = self.dest_entry.get().strip()

        if start not in self.graph or end not in self.graph:
            messagebox.showerror("Error", "Start or destination not in graph.")
            return

        cost, path = self.dijkstra(start, end)
        self.shortest_path = path

        if cost == float("inf"):
            self.result_label.config(text="No path found.")
        else:
            self.result_label.config(text=f"Optimal route: {' → '.join(path)}\nTotal cost: {cost:.2f}")

    def dijkstra(self, start, end):
        queue = [(0, start, [start])]
        visited = set()

        while queue:
            cost, node, path = heapq.heappop(queue)
            if node in visited:
                continue
            visited.add(node)
            if node == end:
                return cost, path

            for neighbor, weight in self.graph.get(node, []):
                if (node, neighbor) in self.blocked_edges:
                    continue
                if neighbor not in visited:
                    heapq.heappush(queue, (cost + weight, neighbor, path + [neighbor]))

        return float("inf"), []

    def show_graph(self):
        G = nx.Graph()
        for u in self.graph:
            for v, cost in self.graph[u]:
                if not G.has_edge(u, v):
                    G.add_edge(u, v, weight=round(cost, 2))

        pos = nx.spring_layout(G)
        edge_labels = nx.get_edge_attributes(G, 'weight')

        plt.figure(figsize=(7, 5))
        nx.draw(G, pos, with_labels=True, node_color='lightblue', edge_color='gray',
                node_size=1500, font_size=10)
        nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_color='red')

        # Blocked roads (red dashed)
        blocked = [(u, v) for u, v in self.blocked_edges if G.has_edge(u, v)]
        nx.draw_networkx_edges(G, pos, edgelist=blocked, edge_color='red', style='dashed', width=2)

        # Shortest path (blue bold)
        if len(self.shortest_path) > 1:
            path_edges = list(zip(self.shortest_path, self.shortest_path[1:]))
            nx.draw_networkx_edges(G, pos, edgelist=path_edges, edge_color='blue', width=3)

        plt.title("Road Network Graph")
        plt.tight_layout()
        plt.show()

if __name__ == "__main__":
    root = tk.Tk()
    app = EmergencyRouteApp(root)
    root.mainloop()
